//
//  ViewController.swift
//  MultithreadingFirst
//
//  Created by Mad Brains on 17.06.2020.
//  Copyright ¬© 2020 GeekTest. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        
        runSimpleOutput()
    }

    // –¢–µ—Å—Ç RunLoop –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Autoreleasepool
    func makeRunLoopWithoutAutoreleasepoolTest() {
        print("start test")
        
        for index in 0...UInt.max {
            let string = NSString(format: "test + %d", index)
            print(string)
        }
        
        print("end test")
    }
    
    // –¢–µ—Å—Ç RunLoop –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Autoreleasepool
    func makeRunLoopAutoreleasepoolTest() {
        print("start test")
        
        for index in 0...UInt.max {
            autoreleasepool {
                let string = NSString(format: "test + %d", index)
                print(string)
            }
        }
        
        print("end test")
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–∏–∫-—Ç–∞–π–º–µ—Ä–∞
    func runSimpleTickTimer() {
        Timer.scheduledTimer(withTimeInterval: 0.25, repeats: true) { timer in
            print("tick")
        }
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ —Å –≤—ã–≤–æ–¥–æ–º –¥–∞—Ç—ã
    func runSimpleCurrentDateTimer() {
        Timer.scheduledTimer(withTimeInterval: 0.25, repeats: true) { timer in
            print(Date())
        }
    }

    // –ó–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    func runMultipleTimers() {
        Timer.scheduledTimer(withTimeInterval: 0.25, repeats: true) { timer in
            print(Date())
        }
        
        Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { timer in
            sleep(1)
        }
    }

    // –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    func runSimpleOutput() {
        for _ in (0..<10) {
          print("üî¥")
        }
                
        for _ in (0..<10) {
            print("üü†")
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –≤ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫
    // –ü–ï–†–í–´–ô –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø THREAD
    func runMultithreadOutput() {
        Thread.detachNewThread {
            for _ in (0..<10) {
                print("üî¥")
            }
        }
                
        for _ in (0..<10) {
            print("üü†")
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π
    // –í–¢–û–†–û–ô –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø THREAD
    func runControlledThread() {
        let thread = Thread {
            for _ in (0..<10) {
                print("üî¥")
            }
        }
                
        thread.start()
                
        for _ in (0..<10) {
            print("üü†")
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    // –¢–†–ï–¢–ò–ô –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø THREAD
    func runCustomThread() {
        let thread1 = CustomThread()
                
        thread1.start()
                
        for _ in (0..<10) {
            print("üü†")
        }
    }
    
    
    /* –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–¢–û–ö–ê–ú–ò */
    
    func runCustomControllerThread() {
        let thread = CustomThread()
        thread.start()
        
        // –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢ –ü–û–¢–û–ö! –î–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        thread.cancel()
    }

    func runInfintyThread() {
        let thread = InfintyThread()
        thread.start()
        
        // –ü—Ä–∏ –≤—ã–∑–æ–≤–µ cancel —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ start –ø–æ—Ç–æ–∫ –¥–∞–∂–µ –ù–ï –ù–ê–ß–ù–ï–¢ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.
        thread.cancel()
    }

    func runInfintyThreadWithSleepTime() {
        let thread = InfintyThread()
        thread.start()
        
        sleep(2)
        
        thread.cancel()
    }
    
    func runInfintyStoppableThread() {
        let thread = InfintyStoppableThread()
        thread.start()
        
        sleep(2)
        
        thread.cancel()
    }
    
    /* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ */
    func runRedAndOrangeThreads() {
        let orangeThread = CustomOrangeThread()
        let redThread = CustomRedThread()
        
        orangeThread.start()
        redThread.start()
    }
    
    func runRedAndOrangeThreadsWithDifferentQuality() {
        let orangeThread = CustomOrangeThread()
        let redThread = CustomRedThread()
        
        orangeThread.qualityOfService = .background
        redThread.qualityOfService = .userInitiated
        
        orangeThread.start()
        redThread.start()
    }
    
    /* RunLoop –≤ –ø–æ—Ç–æ–∫–∞—Ö */
    
    func runCustomTimerThread() {
        let timerThread = TimeThread()
        
        timerThread.start()
    }
    
}

